{
	"info": {
		"_postman_id": "48284099-76dc0f0a-693f-48e7-9fbc-fb65a262b5c7",
		"name": "Tour_and_Travel_BiH",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [],
			"id": "48284099-751f266b-ddc4-4377-8ebe-d60c1994b1cc"
		},
		{
			"name": "EndUser",
			"item": [
				{
					"name": "Positive Ednpoints",
					"item": [
						{
							"name": "Create User & Login",
							"item": [
								{
									"name": "RegisterUserAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df99e881-2e8d-48d6-800b-8ae4d6135910",
												"exec": [
													"const requestBody = pm.request.body.raw;\r",
													"const requestData = JSON.parse(requestBody);\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// Store accountId from newAccount\r",
													"if (jsonData.newAccount && jsonData.newAccount.accountId) {\r",
													"    pm.environment.set(\"accountId\", jsonData.newAccount.accountId);\r",
													"    console.log(\"accountId stored from newAccount:\", jsonData.newAccount.accountId);\r",
													"}\r",
													"\r",
													"// Store username \r",
													"if (jsonData.newAccount && jsonData.newAccount.username){\r",
													"    pm.environment.set(\"username\", jsonData.newAccount.username);\r",
													"    console.log(\"username stored from newAccount\", jsonData.newAccount.username);\r",
													"}\r",
													"\r",
													"//store user password\r",
													"if (jsonData.newAccount && jsonData.newAccount.userPassword){\r",
													"    pm.environment.set(\"userPassword\", jsonData.newAccount.userPassword);\r",
													"    console.log(\"User password stored from newAccount\", jsonData.newAccount.userPassword);\r",
													"}\r",
													"\r",
													"//checks API status\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//checks JSON response\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.expect(pm.response.json()).to.not.be.null;\r",
													"});\r",
													"\r",
													"//checks if API response headers are valid\r",
													"pm.test(\"check if API response headers are valid\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"//check if API respons time is below 500ms\r",
													"pm.test(\"Response time is below 500ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"//checks if API method is Valid\r",
													"pm.test(\"API method is valid\", function(){\r",
													"    pm.expect(pm.request.method).to.eql(\"POST\");\r",
													"});\r",
													"\r",
													"//checks if API endpoint URL is valid\r",
													"pm.test(\"URL Endpoint is valid\", function(){\r",
													"    const baseUrl = pm.variables.get(\"baseUrl\");\r",
													"    pm.expect(pm.request.url.toString()).to.eql(`${baseUrl}/api/Users/RegisterUser`);\r",
													"});\r",
													"\r",
													"//checks required fields\r",
													"pm.test(\"Response contains required user properties\", function() {\r",
													"    pm.expect(jsonData).to.have.property(\"newUser\");\r",
													"    pm.expect(jsonData).to.have.property(\"newAccount\");\r",
													"\r",
													"    const newUser = jsonData.newUser;\r",
													"    const newAccount = jsonData.newAccount;\r",
													"\r",
													"    pm.expect(newUser).to.have.property(\"name\");\r",
													"    pm.expect(newUser).to.have.property(\"surname\");\r",
													"    pm.expect(newUser).to.have.property(\"address\");\r",
													"    pm.expect(newUser).to.have.property(\"dateOfBirth\");\r",
													"    pm.expect(newUser).to.have.property(\"contact\");\r",
													"    pm.expect(newUser).to.have.property(\"email\");\r",
													"\r",
													"    pm.expect(newAccount).to.have.property(\"accountTypeId\");\r",
													"    pm.expect(newAccount).to.have.property(\"username\");\r",
													"    pm.expect(newAccount).to.have.property(\"userPassword\");\r",
													"    pm.expect(newAccount).to.have.property(\"userImage\");\r",
													"});\r",
													"\r",
													"//checks are fields valid\r",
													"pm.test(\"Response fields match request data\", function() {\r",
													"    const newUser = jsonData.newUser;\r",
													"    const newAccount = jsonData.newAccount;\r",
													"\r",
													"    pm.expect(newUser.email).to.eql(requestData.email);\r",
													"    pm.expect(newUser.contact).to.eql(requestData.contact);\r",
													"    pm.expect(newAccount.userImage).to.eql(requestData.userImage);\r",
													"});\r",
													"\r",
													"//checks email format\r",
													"pm.test(\"Email format is valid\", function() {\r",
													"    const newUser = jsonData.newUser;\r",
													"    pm.expect(newUser.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"});\r",
													"//checks if picture format valid\r",
													"pm.test(\"Picture format is valid\", function() {\r",
													"    const newAccount = jsonData.newAccount;\r",
													"    pm.expect(newAccount.userImage).to.match(/\\w+\\.(jpg|png)$/i);\r",
													"});\r",
													"//checks if API payload size is within accepted limits 1024\r",
													"pm.test(\"API payload is within acceptable size\", function(){\r",
													"    pm.expect(pm.request.body.raw.length).to.be.below(1024);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-3e27ec31-e723-4dae-a53e-7173e366c5f8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"surname\": \"{{$randomLastName}}\",\r\n  \"address\": \"{{$randomStreetAddress}}\",\r\n  \"dateOfBirth\": \"1998-09-14\",\r\n  \"contact\": \"{{$randomPhoneNumber}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"userPassword\": \"{{$randomPassword}}\",\r\n  \"userImage\": \"user.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Users/RegisterUser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Users",
												"RegisterUser"
											]
										}
									},
									"response": [
										{
											"id": "48284099-af3edd32-f9ac-44ca-83bd-9b182803f868",
											"name": "RegisterUserAccount",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"surname\": \"{{$randomLastName}}\",\r\n  \"address\": \"{{$randomStreetAddress}}\",\r\n  \"dateOfBirth\": \"1998-09-14\",\r\n  \"contact\": \"{{$randomPhoneNumber}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"userPassword\": \"{{$randomPassword}}\",\r\n  \"userImage\": \"user.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Users/RegisterUser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Users",
														"RegisterUser"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "1171"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:44:20 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"newUser\": {\n        \"userId\": 10,\n        \"name\": \"Lonny\",\n        \"surname\": \"Cruickshank\",\n        \"address\": \"50048 Derrick Square\",\n        \"dateOfBirth\": \"09-14-1998\",\n        \"contact\": \"596-475-8892\",\n        \"email\": \"Camille_Casper25@gmail.com\",\n        \"accounts\": [\n            {\n                \"accountId\": 9,\n                \"username\": \"Mandy_Smitham69\",\n                \"userPassword\": \"C4Rzmk01KSch7gk\",\n                \"userImage\": \"user.jpg\",\n                \"userId\": 10,\n                \"accountTypeId\": 2,\n                \"authenticationTokens\": []\n            }\n        ],\n        \"favorites\": [],\n        \"reservations\": [],\n        \"reviews\": []\n    },\n    \"newAccount\": {\n        \"accountId\": 9,\n        \"username\": \"Mandy_Smitham69\",\n        \"userPassword\": \"C4Rzmk01KSch7gk\",\n        \"userImage\": \"user.jpg\",\n        \"userId\": 10,\n        \"accountTypeId\": 2,\n        \"authenticationTokens\": [],\n        \"user\": {\n            \"userId\": 10,\n            \"name\": \"Lonny\",\n            \"surname\": \"Cruickshank\",\n            \"address\": \"50048 Derrick Square\",\n            \"dateOfBirth\": \"09-14-1998\",\n            \"contact\": \"596-475-8892\",\n            \"email\": \"Camille_Casper25@gmail.com\",\n            \"accounts\": [],\n            \"favorites\": [],\n            \"reservations\": [],\n            \"reviews\": []\n        }\n    }\n}"
										}
									]
								},
								{
									"name": "UserLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7891d8bf-38e5-4d05-8e8b-389aea985318",
												"exec": [
													"//authorization token automaticaly added to the environment variable\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// checks if response has token value\r",
													"if (jsonData.token) {\r",
													"    pm.environment.set(\"enduserToken\", jsonData.token);\r",
													"    console.log(\"User token set: \" + jsonData.token);\r",
													"} else {\r",
													"    console.log(\"Token not found in response!\");\r",
													"}\r",
													"\r",
													"//store userId after login\r",
													"if(jsonData.user && jsonData.user.userId){\r",
													"    pm.environment.set(\"endUserId\", jsonData.user.userId);\r",
													"}\r",
													"\r",
													"//store accountId\r",
													"if(jsonData.user && jsonData.user.accountId){\r",
													"    pm.environment.set(\"accountId\", jsonData.user.accountId);\r",
													"}\r",
													"\r",
													"//checks response status\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Are API response headers valid\r",
													"pm.test(\"API response header is valid\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"// Token is not empty\r",
													"pm.test(\"Token is not empty\", function(){\r",
													"    pm.expect(pm.response.json().token).not.to.be.empty;\r",
													"})\r",
													"\r",
													"// response has token\r",
													"pm.test(\"Response has token\", function(){\r",
													"    pm.expect(pm.response.json()).to.have.property(\"token\");\r",
													"    pm.expect(pm.response.json().token).to.be.a(\"string\").and.not.empty;\r",
													"});\r",
													"\r",
													"//Response has objects\r",
													"pm.test(\"Response has user object\", function(){\r",
													"    pm.expect(pm.response.json().user).to.have.property(\"userId\");\r",
													"    pm.expect(pm.response.json().user).to.have.property(\"name\");\r",
													"    pm.expect(pm.response.json().user).to.have.property(\"surname\");\r",
													"    pm.expect(pm.response.json().user).to.have.property(\"accountTypeId\");\r",
													"});\r",
													"\r",
													"// UserId should be a positive number\r",
													"pm.test(\"UserId is a positive number\", function () {\r",
													"    pm.expect(jsonData.user.userId).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.user.userId).to.be.above(0);\r",
													"});\r",
													"\r",
													"// Error handling if token is missing\r",
													"if (!jsonData.token) {\r",
													"    console.error(\"Token not found in response!\");\r",
													"    pm.test(\"Token missing error\", function () {\r",
													"        throw new Error(\"Token not found in response\");\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-82bdcd91-c6a2-4269-bc7e-504468ac5180",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"userPassword\": \"{{userPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": [
										{
											"id": "48284099-b3736b2b-e039-4b38-857e-276e3086434b",
											"name": "UserLogin",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"Mandy_Smitham69\",\r\n    \"userPassword\": \"C4Rzmk01KSch7gk\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "162"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:46:16 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"token\": \"TrTnajrLg2\",\n    \"tokenId\": 20,\n    \"user\": {\n        \"userId\": 10,\n        \"name\": \"Lonny\",\n        \"surname\": \"Cruickshank\",\n        \"accountTypeId\": 2\n    }\n}"
										}
									]
								}
							],
							"id": "48284099-b0465c70-d924-4cb2-b034-d173f7c9ec5f"
						},
						{
							"name": "Favorite Items",
							"item": [
								{
									"name": "AddIntoFavorite",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cfcedf1-c561-464a-bca0-e20d6d8ef8d4",
												"exec": [
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.expect(pm.response.json());\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"packageId matches request\", function () {\r",
													"    const requestBody = pm.request.body ? JSON.parse(pm.request.body.raw) : {};\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.packageId).to.eql(requestBody.packageId);\r",
													"});\r",
													"\r",
													"//store favoriteItemId after adding it\r",
													"if(jsonData && jsonData.favoriteItemId){\r",
													"    pm.environment.set(\"favoriteItemId\", jsonData.favoriteItemId);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-5a6e36e8-211e-4d63-a495-a2508ec22c06",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"packageId\": 1,\r\n  \"userId\": {{endUserId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Favorite/PostFavorite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Favorite",
												"PostFavorite"
											]
										}
									},
									"response": [
										{
											"id": "48284099-2a5ab4b2-1d0d-4ded-8912-b0da2ff0a956",
											"name": "AddIntoFavorite",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"packageId\": 1,\r\n  \"userId\": {{endUserId}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Favorite/PostFavorite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Favorite",
														"PostFavorite"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "63"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:46:47 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"favoriteItemId\": 6,\n    \"packageId\": 1,\n    \"userId\": 10\n}"
										}
									]
								},
								{
									"name": "GetFavoriteItems",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b059ad13-400c-49e6-b2a1-ca6d86b791af",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//checks if response is JSON\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.expect(pm.response.json());\r",
													"});\r",
													"\r",
													"isJson = true;\r",
													"\r",
													"if (isJson) {\r",
													"    //Checks if there is favorites array\r",
													"    pm.test(\"Favorites array is present\", function () {\r",
													"        pm.expect(jsonData).to.be.an(\"array\");\r",
													"    });\r",
													"\r",
													"    if (jsonData.length > 0) {\r",
													"        // Each favorite item has required fields\r",
													"        pm.test(\"Each favorite item has required fields\", function () {\r",
													"            jsonData.forEach(item => {\r",
													"                pm.expect(item).to.have.property(\"favoriteItemId\");\r",
													"                pm.expect(item).to.have.property(\"packageId\");\r",
													"                pm.expect(item).to.have.property(\"userId\");\r",
													"            })\r",
													"        });\r",
													"\r",
													"        // data types are valid\r",
													"        pm.test(\"Favorite item fields have correct data types\", function () {\r",
													"            jsonData.forEach(item => {\r",
													"                pm.expect(item.favoriteItemId).to.be.a(\"number\");\r",
													"                pm.expect(item.packageId).to.be.a(\"number\");\r",
													"                pm.expect(item.userId).to.be.a(\"number\");\r",
													"            })\r",
													"        })\r",
													"\r",
													"        // Each favorite item belongs to the logged-in user\r",
													"        pm.test(\"Each favorite item belongs to the logged-in user\", function () {\r",
													"            const loggedInUserId = parseInt(pm.environment.get(\"endUserId\"), 10);\r",
													"            jsonData.forEach(item => {\r",
													"                pm.expect(item.userId).to.eql(loggedInUserId);\r",
													"            });\r",
													"        });\r",
													"\r",
													"        //checks if user has favorites items\r",
													"\r",
													"        pm.test(\"User has at least one favorite item\", function () {\r",
													"            pm.expect(jsonData.length).to.be.above(0);\r",
													"        });\r",
													"\r",
													"    } else {\r",
													"        // user has no favorites items\r",
													"        pm.test(\"User has no favorite items\", function () {\r",
													"            pm.expect(jsonData.length).to.eql(0);\r",
													"        });\r",
													"    }\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-e00615a9-adc8-46a9-b66b-83442ca3c0a7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Favorite/GetFavorite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Favorite",
												"GetFavorite"
											]
										}
									},
									"response": [
										{
											"id": "48284099-82001340-b74a-427a-91b9-7cbc96e7ee52",
											"name": "GetFavoriteItems",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Favorite/GetFavorite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Favorite",
														"GetFavorite"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "2"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:46:36 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[]"
										}
									]
								},
								{
									"name": "DeleteFromFavorite",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "327190a8-1aca-4978-baf1-39fb86c5ecfc",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Response time is below 1000ms\r",
													"pm.test(\"Response time is below 1000ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"})\r",
													"\r",
													"//check API Url endpoint is valid\r",
													"pm.test(\"API URL endpoint is valid\", function(){\r",
													"    pm.expect(pm.request.url.toString()).to.eql(`${pm.environment.get('baseUrl')}/api/Favorite/DeleteFavorite/${pm.environment.get('favoriteItemId')}`);\r",
													"})\r",
													"\r",
													"//check header content type\r",
													"pm.test(\"Content-Type is application/json\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-a12b29c8-0f5a-40ee-97aa-39e1605cc99e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Favorite/DeleteFavorite/{{favoriteItemId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Favorite",
												"DeleteFavorite",
												"{{favoriteItemId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-42e88ec1-d3ff-462c-9cb7-36b509830f1c",
											"name": "DeleteFavoriteItem",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Favorite/DeleteFavorite/{{favoriteItemId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Favorite",
														"DeleteFavorite",
														"{{favoriteItemId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "63"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:47:15 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"favoriteItemId\": 6,\n    \"packageId\": 1,\n    \"userId\": 10\n}"
										}
									]
								}
							],
							"id": "48284099-f1bde025-05a5-41ee-8dce-5f5d613e71ee"
						},
						{
							"name": "Reservations",
							"item": [
								{
									"name": "MakeReservation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e3454f8-7682-44f1-ab71-664c8286c06f",
												"exec": [
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.expect(pm.response.json());\r",
													"});\r",
													"\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (jsonData && jsonData.reservationId) {\r",
													"    pm.environment.set(\"reservationId\", jsonData.reservationId);\r",
													"    console.log(\"reservationId saved:\", jsonData.reservationId);\r",
													"}\r",
													"\r",
													"\r",
													"// Status code check\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Content-Type check\r",
													"pm.test(\"Content-Type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"// Checks if response contains all required fields\r",
													"pm.test(\"Response contains required fields\", function(){\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    pm.expect(jsonData).to.have.property(\"reservationId\");\r",
													"    pm.expect(jsonData).to.have.property(\"packageId\");\r",
													"    pm.expect(jsonData).to.have.property(\"userId\");\r",
													"});\r",
													"\r",
													"// Checks if reservationId is above 0\r",
													"pm.test(\"Reservation ID is above 0\", function(){\r",
													"    pm.expect(jsonData.reservationId).to.be.above(0);\r",
													"});\r",
													"\r",
													"// Checks if userId matches environment userId\r",
													"pm.test(\"Fields are valid\", function(){\r",
													"    pm.expect(jsonData).to.have.property(\"userId\");\r",
													"    pm.expect(jsonData.userId).to.eql(Number(pm.environment.get(\"endUserId\")));\r",
													"});\r",
													"\r",
													"// Test packageId matches request\r",
													"pm.test(\"packageId matches request\", function () {\r",
													"    const expectedPackageId = pm.request.body.raw ? JSON.parse(pm.request.body.raw).packageId : null;\r",
													"    pm.expect(jsonData.packageId).to.eql(expectedPackageId);\r",
													"});\r",
													"\r",
													"// API Response time\r",
													"pm.test(\"API response time is within accepted limits\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-e69bb28c-ef2f-43df-baa2-64571d2b455b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"totalTravelers\": 4,\r\n  \"dateOfReservation\": \"2025-09-14\",\r\n  \"totalPrice\": 20,\r\n  \"userId\": {{endUserId}},\r\n  \"packageId\": 1,\r\n  \"reservationStatus\": \"reservisano\"\r\n  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/PostReservation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"PostReservation"
											]
										}
									},
									"response": [
										{
											"id": "48284099-3a742bff-f0c8-4c1b-bf64-7279bfac1cfe",
											"name": "MakeReservation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"totalTravelers\": 4,\r\n  \"dateOfReservation\": \"2025-09-14\",\r\n  \"totalPrice\": 20,\r\n  \"userId\": {{endUserId}},\r\n  \"packageId\": 1,\r\n  \"reservationStatus\": \"reservisano\"\r\n  }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Reservation/PostReservation",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Reservation",
														"PostReservation"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "223"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:47:39 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"reservationId\": 6,\n    \"totalTravelers\": 4,\n    \"dateOfReservation\": \"2025-09-14\",\n    \"totalPrice\": 20,\n    \"userId\": 10,\n    \"packageId\": 1,\n    \"reservationStatus\": \"reservisano\",\n    \"payments\": [],\n    \"reviews\": []\n}"
										}
									]
								},
								{
									"name": "UpdateReservation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "836bdbab-94fc-4e45-a66b-b0ba2da0d79d",
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"//checks if response is JSON\r",
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.expect(pm.response.to.be.json);\r",
													"});\r",
													"\r",
													"//checks if API payload is within accepted limits\r",
													"pm.test(\"Response payload is within accepted limits\", function () {\r",
													"    pm.expect(pm.response.text().length).to.be.below(1024);\r",
													"});\r",
													"\r",
													"//checks if API URL is correct\r",
													"pm.test(\"API URL is correct\", function () {\r",
													"    pm.expect(pm.request.url.toString()).to.include(`${pm.environment.get('baseUrl')}/api/Reservation/UpdateReservation/${pm.environment.get('reservationId')}`);\r",
													"});\r",
													"\r",
													"//checks if API headers are correct\r",
													"pm.test(\"API Headers are correct\", function () {\r",
													"    pm.expect(pm.request.headers.get('Content-Type')).to.eql('application/json');\r",
													"});\r",
													"\r",
													"//checks if response has expected id\r",
													"pm.test(\"Response has expected id\", function () {\r",
													"    let requestData = JSON.parse(pm.request.body.raw);\r",
													"    let responseData = pm.response.json();\r",
													"    pm.expect(responseData.id).to.eql(requestData.id);\r",
													"});\r",
													"\r",
													"//checks if fields are edited\r",
													"pm.test(\"Fields are edited\", function () {\r",
													"    let requestData = JSON.parse(pm.request.body.raw);\r",
													"    pm.expect(jsonData.totalTravelers).to.eql(requestData.totalTravelers);\r",
													"    pm.expect(jsonData.dateOfReservation).to.eql(requestData.dateOfReservation);\r",
													"    pm.expect(jsonData.totalPrice).to.eql(requestData.totalPrice);\r",
													"    pm.expect(jsonData.userId).to.eql(requestData.userId);\r",
													"    pm.expect(jsonData.packageId).to.eql(requestData.packageId);\r",
													"    pm.expect(jsonData.reservationStatus).to.eql(requestData.reservationStatus);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-a4dedbaf-5a25-42d9-b148-c25846bd2ab2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"totalTravelers\": 3,\r\n  \"dateOfReservation\": \"2025-09-14\",\r\n  \"totalPrice\": 15,\r\n  \"userId\": {{endUserId}},\r\n  \"packageId\": 1,\r\n  \"reservationStatus\": \"zavrseno\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/UpdateReservation/{{reservationId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"UpdateReservation",
												"{{reservationId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-00c5aa29-2f31-4021-b535-ab68115e5f06",
											"name": "UpdateReservation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"totalTravelers\": 3,\r\n  \"dateOfReservation\": \"2025-09-14\",\r\n  \"totalPrice\": 15,\r\n  \"userId\": {{endUserId}},\r\n  \"packageId\": 1,\r\n  \"reservationStatus\": \"reservisano\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Reservation/UpdateReservation/{{reservationId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Reservation",
														"UpdateReservation",
														"{{reservationId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "223"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:48:08 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"reservationId\": 6,\n    \"totalTravelers\": 3,\n    \"dateOfReservation\": \"2025-09-14\",\n    \"totalPrice\": 15,\n    \"userId\": 10,\n    \"packageId\": 1,\n    \"reservationStatus\": \"reservisano\",\n    \"payments\": [],\n    \"reviews\": []\n}"
										}
									]
								},
								{
									"name": "UsersReservations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "981a4175-23b1-479d-8b2c-6f37d8d2d173",
												"exec": [
													"const responseStatus = pm.response.code;\r",
													"\r",
													"pm.test(\"Status code is 404 or 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404, 200]);\r",
													"});\r",
													"\r",
													"if (responseStatus === 200) {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    // Response must be an array\r",
													"    pm.test(\"Response is JSON (array)\", function () {\r",
													"        pm.expect(jsonData).to.be.an('array');\r",
													"    });\r",
													"\r",
													"    if (jsonData.length > 0) {\r",
													"        // Each reservation has required fields\r",
													"        pm.test(\"Each reservation has required fields\", function () {\r",
													"            jsonData.forEach(item => {\r",
													"                pm.expect(item).to.have.property(\"reservationId\");\r",
													"                pm.expect(item).to.have.property(\"packageId\");\r",
													"                pm.expect(item).to.have.property(\"userId\");\r",
													"                pm.expect(item).to.have.property(\"totalTravelers\");\r",
													"                pm.expect(item).to.have.property(\"totalPrice\");\r",
													"                pm.expect(item).to.have.property(\"reservationStatus\");\r",
													"            });\r",
													"        });\r",
													"\r",
													"        // data types are valid\r",
													"        pm.test(\"Reservation fields have correct data types\", function () {\r",
													"            jsonData.forEach(item => {\r",
													"                pm.expect(item.reservationId).to.be.a(\"number\");\r",
													"                pm.expect(item.packageId).to.be.a(\"number\");\r",
													"                pm.expect(item.userId).to.be.a(\"number\");\r",
													"                pm.expect(item.totalTravelers).to.be.a(\"number\");\r",
													"                pm.expect(item.totalPrice).to.be.a(\"number\");\r",
													"                pm.expect(item.reservationStatus).to.be.a(\"string\"); \r",
													"            });\r",
													"        });\r",
													"\r",
													"        // Each reservation belongs to the logged-in user\r",
													"        pm.test(\"Each reservation belongs to the logged-in user\", function () {\r",
													"            const loggedInUserId = parseInt(pm.environment.get(\"endUserId\"), 10);\r",
													"            jsonData.forEach(item => {\r",
													"                pm.expect(item.userId).to.eql(loggedInUserId);\r",
													"            });\r",
													"        });\r",
													"\r",
													"        //checks if user has reservations\r",
													"        pm.test(\"User has at least one reservation\", function () {\r",
													"            pm.expect(jsonData.length).to.be.above(0);\r",
													"        });\r",
													"\r",
													"    } else {\r",
													"        // user has no reservations\r",
													"        pm.test(\"User has no reservations\", function () {\r",
													"            pm.expect(jsonData.length).to.eql(0);\r",
													"        });\r",
													"    }\r",
													"} else {\r",
													"    // Handle non-JSON responses gracefully\r",
													"    pm.test(\"Response is not JSON when reservations are not found\", function () {\r",
													"        pm.expect(pm.response.text()).to.eql(\"No reservations found for this user.\");\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-216c1c37-8861-4af3-a07a-9cfcda40f7b4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/GetReservationsByUserId/{{endUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"GetReservationsByUserId",
												"{{endUserId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-c8464b5e-7226-470b-adf4-118b25cac263",
											"name": "UsersReservations",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Reservation/GetReservationsByUserId/{{endUserId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Reservation",
														"GetReservationsByUserId",
														"{{endUserId}}"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:47:24 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "No reservations found for this user."
										}
									]
								},
								{
									"name": "DeleteReservation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8217a4ac-cf91-428d-9fb8-02597f29b136",
												"exec": [
													"pm.test(\"Response is JSON\", function () {\r",
													"    pm.expect(pm.response.json());\r",
													"});\r",
													"\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Response time is below 1000ms\r",
													"pm.test(\"Response time is below 1000ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"})\r",
													"\r",
													"//check API Url endpoint is valid\r",
													"pm.test(\"API URL endpoint is valid\", function(){\r",
													"    pm.expect(pm.request.url.toString()).to.eql(`${pm.environment.get('baseUrl')}/api/Reservation/DeleteReservation/${pm.environment.get('reservationId')}`);\r",
													"})\r",
													"\r",
													"//check header content type\r",
													"pm.test(\"Content-Type is application/json\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-c2a91379-2b99-472c-b064-a0bb70393444",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/DeleteReservation/{{reservationId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"DeleteReservation",
												"{{reservationId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-2fcec560-dfdd-4fad-9343-b028eb0a77ff",
											"name": "DeleteReservation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Reservation/DeleteReservation/{{reservationId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Reservation",
														"DeleteReservation",
														"{{reservationId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "226"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:48:18 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"reservationId\": 6,\n    \"totalTravelers\": 3,\n    \"dateOfReservation\": \"2025-09-14\",\n    \"totalPrice\": 15,\n    \"userId\": 10,\n    \"packageId\": 1,\n    \"reservationStatus\": \"reservisano\",\n    \"payments\": [],\n    \"reviews\": []\n}"
										}
									]
								}
							],
							"id": "48284099-49d0aba0-0a3b-460f-a7a1-bee81b2282fe"
						},
						{
							"name": "Reviews",
							"item": [
								{
									"name": "LeaveReview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65649a8e-37be-46f8-8830-a723432a279e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if (jsonData && jsonData.reviewId) {\r",
													"    pm.environment.set(\"reservationId\", jsonData.reviewId);\r",
													"    console.log(\"reservationId saved:\", jsonData.reviewId);\r",
													"}\r",
													"\r",
													"//check response header\r",
													"pm.test(\"Response headers are valid\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"//check is API payload within acceptable limits\r",
													"pm.test(\"Response Time is within acceptable limits\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
													"});\r",
													"\r",
													"//checks if API payload is within accepted limits\r",
													"pm.test(\"Response payload is within accepted limits\", function () {\r",
													"    pm.expect(pm.response.text().length).to.be.below(1024);\r",
													"});\r",
													"\r",
													"//check if all required fields are created\r",
													"pm.test(\"Fields are created\", function(){\r",
													"    pm.expect(jsonData).to.be.an('object');\r",
													"    pm.expect(jsonData).to.have.property(\"postDate\");\r",
													"    pm.expect(jsonData).to.have.property(\"reviewComment\");\r",
													"    pm.expect(jsonData).to.have.property(\"reviewId\");\r",
													"    pm.expect(jsonData).to.have.property(\"userId\");\r",
													"    pm.expect(jsonData).to.have.property(\"reservationId\");\r",
													"});\r",
													"\r",
													"pm.test(\"Rating is within valid range\", function () {\r",
													"    pm.expect(jsonData.rating).to.be.within(0, 5);\r",
													"});\r",
													"\r",
													"//check if all field data types are valid\r",
													"pm.test(\"Filed data types are valid\", function(){\r",
													"    pm.expect(jsonData.reviewId).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.userId).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.reservationId).to.be.a(\"number\");\r",
													"})\r",
													"\r",
													"// Validation of review comment\r",
													"pm.test(\"Review comment is not empty\", function () {\r",
													"    pm.expect(jsonData.reviewComment).to.be.a(\"string\").and.not.empty;\r",
													"});\r",
													"\r",
													"// date validation\r",
													"pm.test(\"postDate is a valid date string\", function () {\r",
													"    const date = new Date(jsonData.postDate);\r",
													"    pm.expect(date.toString()).to.not.eql(\"Invalid Date\");\r",
													"});\r",
													"\r",
													"// Checks reservation status\r",
													"pm.test(\"Reservation status is 'zavrseno'\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"reservation\");\r",
													"    pm.expect(jsonData.reservation).to.have.property(\"reservationStatus\");\r",
													"    pm.expect(jsonData.reservation.reservationStatus).to.eql(\"zavrseno\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-3121d0bb-2e99-41a3-a254-fa6b038d8f44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"postDate\": \"2025-09-16\",\r\n  \"reviewComment\": \"Sve 5!!!!\",\r\n  \"rating\": 5,\r\n  \"userId\": {{endUserId}},\r\n  \"reservationId\": {{reservationId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Review/PostReview",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"PostReview"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateReview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "712ae00f-c0a4-447b-833d-7e0937c21b0c",
												"exec": [
													"\r",
													"const jsonData = pm.response.text();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// API response time is within acceptable limits\r",
													"pm.test(\"API response time is within acceptable limits\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1024);\r",
													"});\r",
													"\r",
													"//checks if API payload is within accepted limits\r",
													"pm.test(\"Response payload is within accepted limits\", function () {\r",
													"    pm.expect(pm.response.text().length).to.be.below(1024);\r",
													"});\r",
													"\r",
													"//check request URL\r",
													"pm.test(\"Check request URL\", function(){\r",
													"    pm.expect(pm.request.url.toString()).to.include(`${pm.environment.get('baseUrl')}/api/Review/UpdateReview/${pm.environment.get('reviewId')}`);\r",
													"})\r",
													"\r",
													"const requestData = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"//checks if response has expected id\r",
													"pm.test(\"Response has expected id\", function () {\r",
													"    pm.expect(jsonData.id).to.eql(requestData.id);\r",
													"});\r",
													"\r",
													"const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
													"if (contentType.includes(\"application/json\")) {\r",
													"    const jsonData = pm.response.json();\r",
													"    const requestData = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"    pm.test(\"Fields are edited\", function () {\r",
													"        pm.expect(jsonData.reviewId).to.eql(requestData.reviewId);\r",
													"        pm.expect(jsonData.postDate).to.eql(requestData.postDate);\r",
													"        pm.expect(jsonData.reviewComment).to.eql(requestData.reviewComment);\r",
													"        pm.expect(jsonData.userId).to.eql(requestData.userId);\r",
													"        pm.expect(jsonData.reservationId).to.eql(requestData.reservationId);\r",
													"    });\r",
													"} else {\r",
													"    pm.test(\"Response is 'Review edited'\", function () {\r",
													"        pm.expect(pm.response.text()).to.eql(\"Review edited\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-7fe626e4-a268-4c26-84a0-947e448d07fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"postDate\": \"2025-09-14\",\r\n    \"reviewComment\": \"Jako dobro organizovano\",\r\n    \"rating\": 4,\r\n    \"userId\": {{endUserId}},\r\n    \"reservationId\": {{reservationId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Review/UpdateReview/{{reviewId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"UpdateReview",
												"{{reviewId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetReviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f50dbff4-bb97-474a-878c-4006985a48fe",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-1ae2e1a2-be4c-4804-949c-91e897020e3a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Review/GetReview",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"GetReview"
											]
										}
									},
									"response": [
										{
											"id": "48284099-3d8516ec-7983-45f8-b0a4-608f2986a634",
											"name": "GetReviews",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Review/GetReview",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Review",
														"GetReview"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "192"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:48:44 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "[\n    {\n        \"reviewId\": 1,\n        \"postDate\": \"2024-05-14\",\n        \"rating\": 5,\n        \"reviewComment\": \"Odlicna organizacija. Preporucujem.\",\n        \"user\": \"Faris N\",\n        \"tourPackageId\": 1\n    }\n]"
										}
									]
								},
								{
									"name": "GetReviewByPackageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69022b19-ca29-420f-910a-656fee4bcb04",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.oneOf([200,204]);\r",
													"});\r",
													"\r",
													"//is JSON Valid\r",
													"pm.test(\"Response is valid JSON\", function(){\r",
													"    pm.expect(pm.response.json());\r",
													"});\r",
													"\r",
													"//check response headers\r",
													"pm.test(\"Response headers are valid\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"//check request url\r",
													"pm.test(\"Request Url is valid\", function(){\r",
													"    pm.expect(pm.request.url.toString()).to.eql(`${pm.environment.get('baseUrl')}/api/Review/GetReviewByPackageId/GetReviewByPackageId/${pm.environment.get('tourPackageId')}`);\r",
													"});\r",
													"\r",
													"//check API response time is within acceptable limits\r",
													"pm.test(\"API response time is within acceptable limits\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"//check API Payload size is within acceptable limits\r",
													"pm.test(\"API payload size is wiyhin acceptable limits\", function(){\r",
													"     pm.expect(pm.request.body.raw.length).to.be.below(1024);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-a09fb975-8068-49a2-a704-166e2e8751bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Review/GetReviewByPackageId/GetReviewByPackageId/{{tourPackageId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"GetReviewByPackageId",
												"GetReviewByPackageId",
												"{{tourPackageId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-478f9985-a74c-45b3-86d7-0980e758dad5",
											"name": "ViewSingleReview",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Review/GetReviewByPackageId/{{tourPackageId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Review",
														"GetReviewByPackageId",
														"{{tourPackageId}}"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "0"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:48:53 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": null
										}
									]
								},
								{
									"name": "DeleteReview",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a41b0925-9991-446f-ac32-2e165111e9c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Response time is below 1000ms\r",
													"pm.test(\"Response time is below 1000ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"})\r",
													"\r",
													"//check API Url endpoint is valid\r",
													"pm.test(\"API URL endpoint is valid\", function(){\r",
													"    pm.expect(pm.request.url.toString()).to.eql(`${pm.environment.get('baseUrl')}/api/Review/DeleteReview/${pm.environment.get('reviewId')}`);\r",
													"})\r",
													"\r",
													"//check header content type\r",
													"pm.test(\"Content-Type is application/json\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-a498dcd2-217e-4f7a-959a-bae06503d272",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Review/DeleteReview/{{reviewId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"DeleteReview",
												"{{reviewId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "48284099-63057ba4-c269-4972-a879-63946e8ab2b1"
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "UpdateAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b972e42-a8ed-4194-8295-e3f7ca9d6fe2",
												"exec": [
													"// Status code\r",
													"pm.test(\"Status code is 200 or 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
													"});\r",
													"\r",
													"// User update validation\r",
													"pm.test(\"User updated successfully\", () => {\r",
													"    if (pm.response.headers.get('Content-Type')?.includes('application/json')) {\r",
													"        const res = pm.response.json();\r",
													"        const requestData = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"        pm.expect(res.username).to.eql(requestData.username);\r",
													"        pm.expect(res.userPassword).to.eql(requestData.userPassword);\r",
													"        pm.expect(res.userImage).to.eql(requestData.userImage);\r",
													"        pm.expect(res.accountTypeId).to.eql(requestData.accountTypeId);\r",
													"    } else {\r",
													"        pm.expect(pm.response.text()).to.include(\"Account not found\");\r",
													"    }\r",
													"});\r",
													"\r",
													"// Checks if API headers are correct\r",
													"pm.test(\"API Headers are correct\", function () {\r",
													"    const contentType = pm.response.headers.get('Content-Type');\r",
													"    pm.expect(contentType).to.satisfy(type => \r",
													"        type.includes('application/json') || type.includes('text/plain')\r",
													"    );\r",
													"});\r",
													"\r",
													"\r",
													"// Checks if API payload is within accepted limits\r",
													"pm.test(\"Response payload is within accepted limits\", function () {\r",
													"    pm.expect(pm.response.text().length).to.be.below(1024);\r",
													"});\r",
													"\r",
													"// Checks if API URL is correct\r",
													"pm.test(\"API URL is correct\", function () {\r",
													"    const expectedUrl = `${pm.environment.get('baseUrl')}/api/Account/UpdateAccount/${pm.environment.get('accountId')}`;\r",
													"    pm.expect(pm.request.url.toString()).to.eql(expectedUrl);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-cf1b0dac-913f-4d6f-ae6e-87e7a85126c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"userPassword\": \"{{$randomPassword}}\",\r\n  \"userImage\": \"image.png\",\r\n  \"userId\": {{endUserId}},\r\n  \"accountTypeId\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Account/UpdateAccount/{{accountId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Account",
												"UpdateAccount",
												"{{accountId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-0f2c5c4b-0faa-460d-a2bb-8321b15095d5",
											"name": "UpdateAccount",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"userPassword\": \"{{$randomPassword}}\",\r\n  \"userImage\": \"image.png\",\r\n  \"userId\": {{endUserId}},\r\n  \"accountTypeId\": 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Account/UpdateAccount/{{accountId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Account",
														"UpdateAccount",
														"{{accountId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:49:19 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "Account edited"
										}
									]
								},
								{
									"name": "UserLogout",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e02533e-d0cb-43a1-84d3-6c915b82ad97",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Response doesn't contain sensitive infromations\r",
													"pm.test(\"Response does not contain sensitive infromations\", function(){\r",
													"    var responseText = pm.response.text();\r",
													"    pm.expect(responseText).to.not.include(\"token\");\r",
													"    pm.expect(responseText).to.not.include(\"password\");\r",
													"    pm.expect(responseText).to.not.include(\"secret\");\r",
													"});\r",
													"\r",
													"//checks if API headers are correct\r",
													"pm.test(\"Check if API headers are correct\", function () {\r",
													"    const contentType = pm.response.headers.get('Content-Type');\r",
													"    pm.expect(contentType, \"Content-Type header is missing\").to.not.be.undefined;\r",
													"    pm.expect(contentType).to.satisfy(type =>\r",
													"        type.includes('application/json') || type.includes('text/plain')\r",
													"    );\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-6db3f942-a910-4f62-9754-07aa6881dc74",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": [
										{
											"id": "48284099-a6be2be2-1b70-4dc5-a5f9-0c55cf2c550a",
											"name": "UserLogout",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/auth/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"auth",
														"logout"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "44"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:49:31 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"message\": \"Logged out successfully\"\n}"
										}
									]
								},
								{
									"name": "DeleteAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3806bd4-695c-4c51-9230-baea6e3b289c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//Response time is below 1000ms\r",
													"pm.test(\"Response time is below 1000ms\", function(){\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"})\r",
													"\r",
													"//check API Url endpoint is valid\r",
													"pm.test(\"API URL endpoint is valid\", function(){\r",
													"    pm.expect(pm.request.url.toString()).to.eql(`${pm.environment.get('baseUrl')}/api/Account/DeleteAccount/${pm.environment.get('accountId')}`);\r",
													"})\r",
													"\r",
													"//check header content type\r",
													"pm.test(\"Content-Type is application/json\", function(){\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"})\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-d17d5a15-61e3-4ed9-b52e-294d21f89cb1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{enduserToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Account/DeleteAccount/{{accountId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Account",
												"DeleteAccount",
												"{{accountId}}"
											]
										}
									},
									"response": [
										{
											"id": "48284099-ea265fde-1b33-4b02-8090-a69e81913a7b",
											"name": "DeleteAccount",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "my-auth-token",
														"value": "{{enduserToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/Account/DeleteAccount/{{accountId}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Account",
														"DeleteAccount",
														"{{accountId}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "335"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Sun, 14 Sep 2025 20:50:30 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"accountId\": 9,\n    \"username\": \"Halle.Kuhn54\",\n    \"userPassword\": \"y9xZNK85ZbVp5nC\",\n    \"userImage\": \"image.png\",\n    \"userId\": 10,\n    \"accountTypeId\": 2,\n    \"authenticationTokens\": [\n        {\n            \"authenticationId\": 21,\n            \"tokenValue\": \"tGFJaFikhC\",\n            \"recordingTime\": \"09-14-2025\",\n            \"accountId\": 9\n        }\n    ]\n}"
										}
									]
								}
							],
							"id": "48284099-fb18103a-34ff-494e-a8bb-de17cde4199e"
						}
					],
					"id": "48284099-dc616134-2c4c-4750-97d7-954be60c4f24"
				},
				{
					"name": "Negative Endpoints",
					"item": [
						{
							"name": "Create User & Login",
							"item": [
								{
									"name": "Register User - missing field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "594d8e2d-85dd-46bc-9d81-dfec4a8a5f3d",
												"exec": [
													"//Expecting a 400 bad request for missing required field\r",
													"\r",
													"//status code\r",
													"pm.test(\"Response statuse code is 400\", function(){\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.text();\r",
													"\r",
													"//check the error message in the response\r",
													"pm.test(\"Error message is present\", function(){\r",
													"    pm.expect(pm.response.text()).not.to.be.empty;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-309a1aec-611c-4d13-8a97-4116ef048dda",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Nejla\",\r\n  \"surname\": \"Belagoši\",\r\n  \"address\": \"Sarajevo\",\r\n  \"dateOfBirth\": \"1995-06-10\",\r\n  \"contact\": \"+38762166353\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"nejla95\",\r\n  \"userPassword\": \"Lozinka123\",\r\n  \"userImage\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Users/RegisterUser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Users",
												"RegisterUser"
											]
										}
									},
									"response": [
										{
											"id": "48284099-c2ff666a-e8ed-43aa-a908-8ce170cec84b",
											"name": "Register User",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Nejla\",\r\n  \"surname\": \"Belagoši\",\r\n  \"address\": \"Sarajevo\",\r\n  \"dateOfBirth\": \"1995-06-10\",\r\n  \"contact\": \"+38762166353\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"nejla95\",\r\n  \"userPassword\": \"Lozinka123\",\r\n  \"userImage\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Users/RegisterUser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Users",
														"RegisterUser"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "366"
												},
												{
													"key": "Content-Type",
													"value": "application/problem+json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Sep 2025 16:32:53 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"errors\": {\n        \"Email\": [\n            \"The Email field is required.\"\n        ],\n        \"UserImage\": [\n            \"The UserImage field is required.\"\n        ]\n    },\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"traceId\": \"00-844e51f5dd67f26da3293b89fd4d4973-f215ed8d0bb65248-00\"\n}"
										}
									]
								},
								{
									"name": "Register User - invalid email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "594d8e2d-85dd-46bc-9d81-dfec4a8a5f3d",
												"exec": [
													"//Expecting a 400 bad request for missing required field\r",
													"\r",
													"//status code\r",
													"pm.test(\"Response statuse code is 400\", function(){\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.text();\r",
													"\r",
													"//check the error message in the response\r",
													"pm.test(\"Error message is present\", function(){\r",
													"    pm.expect(pm.response.text()).to.not.be.empty;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-54e6ea2b-3a15-4586-93e6-0569a3c546ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Nejla\",\r\n  \"surname\": \"Belagoši\",\r\n  \"address\": \"Sarajevo\",\r\n  \"dateOfBirth\": \"1995-06-10\",\r\n  \"contact\": \"+38762166353\",\r\n  \"email\": \"invalid-email...\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"nejla95\",\r\n  \"userPassword\": \"Lozinka123\",\r\n  \"userImage\": \"image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Users/RegisterUser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Users",
												"RegisterUser"
											]
										}
									},
									"response": [
										{
											"id": "48284099-97695e20-46db-4d75-abe1-7cc44745bdad",
											"name": "Register User - invalid email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Nejla\",\r\n  \"surname\": \"Belagoši\",\r\n  \"address\": \"Sarajevo\",\r\n  \"dateOfBirth\": \"1995-06-10\",\r\n  \"contact\": \"+38762166353\",\r\n  \"email\": \"invalid-email...\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"nejla95\",\r\n  \"userPassword\": \"Lozinka123\",\r\n  \"userImage\": \"image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Users/RegisterUser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Users",
														"RegisterUser"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Sep 2025 16:31:44 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "Email nije validan."
										}
									]
								},
								{
									"name": "Register User - duplicate username",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "594d8e2d-85dd-46bc-9d81-dfec4a8a5f3d",
												"exec": [
													"//Expecting a 400 for duplicated username\r",
													"\r",
													"//status code\r",
													"pm.test(\"Response statuse code is 400\", function(){\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.text();\r",
													"\r",
													"//check the error message in the response\r",
													"pm.test(\"Error message is present\", function(){\r",
													"    pm.expect(pm.response.text()).to.not.be.empty;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-066d1ecd-861a-452e-9269-454b3169b1aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Nejla\",\r\n  \"surname\": \"Belagoši\",\r\n  \"address\": \"Sarajevo\",\r\n  \"dateOfBirth\": \"1995-06-10\",\r\n  \"contact\": \"+38762166353\",\r\n  \"email\": \"invalid-email\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"nejlabe3\",\r\n  \"userPassword\": \"Lozinka123\",\r\n  \"userImage\": \"image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Users/RegisterUser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Users",
												"RegisterUser"
											]
										}
									},
									"response": [
										{
											"id": "48284099-a1cf6ab6-1fde-49e5-bb16-62f9ec4cbbfe",
											"name": "Register User - invalid email Copy",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Nejla\",\r\n  \"surname\": \"Belagoši\",\r\n  \"address\": \"Sarajevo\",\r\n  \"dateOfBirth\": \"1995-06-10\",\r\n  \"contact\": \"+38762166353\",\r\n  \"email\": \"invalid-email\",\r\n  \"accountTypeId\": 2,\r\n  \"username\": \"nejlabe3\",\r\n  \"userPassword\": \"Lozinka123\",\r\n  \"userImage\": \"image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/Users/RegisterUser",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"Users",
														"RegisterUser"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Sep 2025 16:24:58 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "Korisničko ime je već zauzeto."
										}
									]
								},
								{
									"name": "Login-missing field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70a5bd47-45bd-4438-8da8-2a68a55335d9",
												"exec": [
													"//status code 400\r",
													"pm.test(\"Response expect to have status code 400\", function(){\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});\r",
													"\r",
													"//expects to have error message\r",
													"pm.test(\"Error message exist\", function(){\r",
													"    pm.expect(pm.response.text()).to.not.be.empty;\r",
													"});\r",
													"\r",
													"// no token is return for failed login\r",
													"pm.test(\"No token is returned for failed login\", function () {\r",
													"    let isJson = false;\r",
													"    let jsonData;\r",
													"    try {\r",
													"        jsonData = pm.response.json();\r",
													"        isJson = true;\r",
													"    } catch (e) {\r",
													"        isJson = false;\r",
													"    }\r",
													"\r",
													"    if (isJson) {\r",
													"        pm.expect(jsonData.token).to.be.undefined;\r",
													"        pm.expect(jsonData.accessToken).to.be.undefined; // If your API uses accessToken\r",
													"    }\r",
													"    // If the response is not JSON, nothing to check in body\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-f9a6fc76-3161-4a05-92a6-e8cfc6323fa3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"zejnilovicb\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": [
										{
											"id": "48284099-de810535-fa89-4eeb-b636-5408eb40af7b",
											"name": "Login",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"zejnilovicb\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "310"
												},
												{
													"key": "Content-Type",
													"value": "application/problem+json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Sep 2025 16:36:57 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"errors\": {\n        \"UserPassword\": [\n            \"The UserPassword field is required.\"\n        ]\n    },\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"traceId\": \"00-33caec2938c270b16eae32cb17e24c6c-145621f7dcd525a9-00\"\n}"
										}
									]
								},
								{
									"name": "Login-invalid username",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70a5bd47-45bd-4438-8da8-2a68a55335d9",
												"exec": [
													"//status code 400\r",
													"pm.test(\"Response expect to have status code 400\", function(){\r",
													"    pm.expect(pm.response.to.have.status(400));\r",
													"});\r",
													"\r",
													"//expects to have error message\r",
													"pm.test(\"Error message exist\", function(){\r",
													"    pm.expect(pm.response.text()).to.not.be.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48284099-c4862c6a-b478-41a0-8e49-ab4c9550bbbf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"nejlaaa234567683\",\r\n    \"userPassword\": \"Berina11$$\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": [
										{
											"id": "48284099-d2c32da6-3775-400f-94a4-cd541161bdef",
											"name": "Login-invalid username",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"nejlaaa234567683\",\r\n    \"userPassword\": \"Berina11$$\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": null,
											"header": [
												{
													"key": "Content-Length",
													"value": "96"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Date",
													"value": "Tue, 16 Sep 2025 16:38:07 GMT"
												},
												{
													"key": "Server",
													"value": "Kestrel"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"code\": \"USER_NOT_FOUND\",\n    \"message\": \"Korisnik ne postoji molimo vas registrujte se.\"\n}"
										}
									]
								}
							],
							"id": "48284099-88be8ee6-af8f-4816-a63c-c632e8b10960"
						},
						{
							"name": "Favorite Items",
							"item": [
								{
									"name": "AddIntoFavorites - without authentication",
									"id": "48284099-4e3ed844-7962-4d65-b5e0-5e97008642b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Favorite/PostFavorite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Favorite",
												"PostFavorite"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteFromFavorite",
									"id": "48284099-8b9a2720-03dd-44dc-b759-94515dfd7bc4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "my-auth-token",
												"value": "{{enduserToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/Favorite/DeleteFavorite/{{favoriteItemId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Favorite",
												"DeleteFavorite",
												"{{favoriteItemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "FavoriteItems",
									"id": "48284099-90b5f4d8-512f-4968-9830-d30bb79f64a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Favorite/GetFavorite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Favorite",
												"GetFavorite"
											]
										}
									},
									"response": []
								}
							],
							"id": "48284099-f2f3d75c-bb23-4a9c-b240-b09f3ccaac78"
						},
						{
							"name": "Reservations",
							"item": [
								{
									"name": "MakeReservation",
									"id": "48284099-2325eaca-8110-409c-baee-88b7668967b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/PostReservation",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"PostReservation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdataeReservation",
									"id": "48284099-e22c2a16-0c21-4fe2-8b85-41112609689f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/UpdateReservation/{{reservationId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"UpdateReservation",
												"{{reservationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UsersReservations",
									"id": "48284099-67c83931-26bc-417f-8bde-093c621fe64b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/GetReservationByUserId/{{endUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"GetReservationByUserId",
												"{{endUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteReservation",
									"id": "48284099-675600fe-76e5-46e2-9937-88243b709950",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Reservation/DeleteReservation/{{reservationId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Reservation",
												"DeleteReservation",
												"{{reservationId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "48284099-132a16d7-f16f-464b-bfb9-eedf7fb769ca"
						},
						{
							"name": "Reviews",
							"item": [
								{
									"name": "LeaveReview",
									"id": "48284099-b8cff5ac-35c4-4efd-9d68-618cdc4ec0d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Review/PostReview",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"PostReview"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateReview",
									"id": "48284099-9f46f66d-95e7-4543-8f12-cd6197fed4fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Review/UpdateReview/{{reviewId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"UpdateReview",
												"{{reviewId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAllReviews",
									"id": "48284099-de5dcc1e-f190-468e-a6d8-60f77ee7941e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Review/GetReview",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"GetReview"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetReviewByPackageId",
									"id": "48284099-1c1188ca-09ff-40eb-a465-addb72b18e1f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Review/GetReviewByPackageId/GetReviewByPackageId/{{tourPackageId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"GetReviewByPackageId",
												"GetReviewByPackageId",
												"{{tourPackageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteReview",
									"id": "48284099-bac490b8-1a7f-4dfb-8997-760006d56bd8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Review/DeleteReview/{{reviewId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Review",
												"DeleteReview",
												"{{reviewId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "48284099-8cba7d47-466c-4afa-97b3-51dd0ccddded"
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "UpdateAccount",
									"id": "48284099-d244ba19-83f7-4de5-b101-bbc281c416a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Account/UpdateAccount/{{accountId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Account",
												"UpdateAccount",
												"{{accountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserLogout",
									"id": "48284099-2fbc465a-a4f5-4e9d-90db-76994201fa46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/auth/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteAccount",
									"id": "48284099-31618f2b-422c-45d2-852c-cd2c1b779305",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Account/DeleteAccount/{{accountId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Account",
												"DeleteAccount",
												"{{accountId}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "48284099-d5d7f75b-1c3b-4344-8759-ec80263444f4"
						}
					],
					"id": "48284099-41443471-9c2b-4410-bcf7-dc9c766f9ceb"
				}
			],
			"id": "48284099-7ffcb962-a8a4-41ef-974d-6ad9b897112a"
		}
	]
}